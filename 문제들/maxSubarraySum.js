// 10.28
// 1. 문제를 이해하기
// - 문제를 내 방식대로 다시 생각할 수 있나요?
//      배열에서 n개의 숫자를 뽑는게 아니라 연속된 배열이여야한다; 더했을 때, 가장 큰 수를 구하시오
// - 입력값
//      숫자 배열(정렬x)과 연속된 배열 수!!!!
// - 출력값
//      배열에서 뽑은 n개의 숫자를 더한 값 중에 가장 큰 수
// - 입력값만으로 출력값을 결정할 수 있나요? 네
// - 중요한 요소
//      슬라이딩 윈도우를 사용한다
//      슬라이딩 윈도우를 사용하는 이유? - 뽑기가 아니라 연속된 배열을 더한거임!!

// 2. 구체적인 예제
// - 간단한 예제
//    100 200 300 400 -> 300 400 -> 700
// - 복잡한 예제
// - 특수한 예제
//    서브배열 크기보다 원 배열 크기가 작은 경우 null을 반환
//    음수가 있어서 제대로 계산이 안된다.

function solution(arr, n) {
  // 서브배열이 원본 배열보다 길이가 커야하는 경우 null을 반환
  // 연속된 상자를 슬라이딩해서 옆으로 미끄러뜨리는 개념
  if (arr.length < n) return null;

  let sum = 0;
  // 첫번째 서브배열 합
  for (let i = 0; i < n; i++) {
    sum += arr[i];
  }
  // idx를 덩어리로 확인한다
  let currentSum = sum;
  for (let i = n; i < arr.length; i++) {
    currentSum += arr[i] - arr[i - n];
    sum = Math.max(currentSum, sum);
  }
  return sum;
}

console.log(
  solution([100, 200, 300, 400], 2), // 700
  solution([1, 4, 2, 10, 23, 3, 1, 0, 20], 4), // 39
  solution([-3, 4, 0, -2, 6, -1], 2), // 5
  solution([3, -2, 7, -4, 1, -1, 4, -2, 1], 2), // 5
  solution([2, 3], 3) // null
);
